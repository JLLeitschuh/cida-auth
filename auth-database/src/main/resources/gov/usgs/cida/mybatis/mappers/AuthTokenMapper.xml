<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gov.usgs.cida.mybatis.mappers.AuthTokenMapper">
	
	<resultMap id="tokenResultMap" type="AuthToken" autoMapping="false">
		<id property="id" column="ID" />
		<result property="tokenId" column="TOKEN_ID" />
		<result property="username" column="USERNAME" />
		<result property="issued" column="ISSUED" javaType="java.sql.Timestamp"/>
		<result property="expires" column="EXPIRES" javaType="java.sql.Timestamp"/>
		<result property="lastAccess" column="LAST_ACCESS" javaType="java.sql.Timestamp"/>
		<collection property="roles" ofType="String">
			<result column="ROLE_NAME" />
		</collection>
	</resultMap>
	
	<select id="getAll" resultMap="tokenResultMap" useCache="false">
        SELECT
			ID,
			TOKEN_ID,
			USERNAME,
			ISSUED,
			EXPIRES,
			LAST_ACCESS,
			ROLE_NAME
        FROM 
			AUTH_TOKEN
		LEFT JOIN
			AUTH_ROLES ON AUTH_TOKEN.ID = AUTH_ROLES.AUTH_TOKEN_ID
    </select>
	
	<select 
        id="getByTokenById" 
        parameterType="String" 
        resultMap="tokenResultMap">
        SELECT
			ID,
			TOKEN_ID,
			USERNAME,
			ISSUED,
			EXPIRES,
			LAST_ACCESS,
			ROLE_NAME
        FROM 
			AUTH_TOKEN
		LEFT JOIN
			AUTH_ROLES ON AUTH_TOKEN.ID = AUTH_ROLES.AUTH_TOKEN_ID
        WHERE
			TOKEN_ID = #{id}
    </select>
	
	<select
		id="getCountForId"
		parameterType="String"
		resultType="int">
		SELECT CT FROM (
			SELECT 
				COUNT(TOKEN_ID) AS CT, EXPIRES
			FROM
				AUTH_TOKEN
			WHERE
				TOKEN_ID = #{id}
			AND
				EXPIRES &gt; CURRENT_TIMESTAMP
			GROUP BY
				EXPIRES
		) S
	</select>
	
	<select
		id="getExpiredTokens"
		resultMap="tokenResultMap">
		SELECT
			ID,
			TOKEN_ID,
			USERNAME,
			ISSUED,
			EXPIRES,
			LAST_ACCESS,
			ROLE_NAME
		FROM 
			AUTH_TOKEN
		LEFT JOIN
			AUTH_ROLES ON AUTH_TOKEN.ID = AUTH_ROLES.AUTH_TOKEN_ID
		WHERE
			EXPIRES &lt; CURRENT_TIMESTAMP
	</select>
	
	<delete 
        id="deleteTokenUsingId" 
        parameterType="String" 
		flushCache="true"
		statementType="PREPARED">
        DELETE FROM AUTH_TOKEN
		WHERE TOKEN_ID = #{id}
    </delete>
	
	<delete 
		id="deleteExpiredTokens" 
		flushCache="true"
		statementType="PREPARED">
		DELETE FROM AUTH_TOKEN
		WHERE EXPIRES &lt; CURRENT_TIMESTAMP
	</delete>
	
	<insert
		id="insertToken"
		flushCache="true"
		statementType="PREPARED"
		keyColumn="id"
		>
		INSERT INTO AUTH_TOKEN (TOKEN_ID,USERNAME,ISSUED,EXPIRES,LAST_ACCESS)
		VALUES (#{tokenId}, #{username}, #{issued}, #{expires}, #{lastAccess})
	</insert>
	
	<insert
		id="insertRole"
		flushCache="true"
		statementType="PREPARED"
		keyColumn="id"
		>
		INSERT INTO AUTH_ROLES (AUTH_TOKEN_ID, ROLE_NAME)
		VALUES (#{id}, #{roleName})
	</insert>
	
	<update
		id="updateTokenExpiration"
		flushCache="true"
		statementType="PREPARED">
		UPDATE AUTH_TOKEN
		SET
			EXPIRES = #{expires}
		WHERE 
			TOKEN_ID = #{tokenId}
	</update>
	
	<update
		id="updateTokenLastAccess"
		flushCache="true"
		statementType="PREPARED">
		UPDATE AUTH_TOKEN
		SET
			LAST_ACCESS = #{lastAccess}
		WHERE 
			TOKEN_ID = #{tokenId}
	</update>
	
	<update
		id="updateToken"
		flushCache="true"
		statementType="PREPARED">
		UPDATE AUTH_TOKEN
		SET
			EXPIRES = #{expires},
			LAST_ACCESS = #{lastAccess}
		WHERE 
			TOKEN_ID = #{tokenId}
	</update>
	
	<!-- TODO This may be temporary, using join on syncope table structure. May want to abstract the DB
	structure away by using the Syncope REST API. Make that change up in DAO also if so. -->
	<select 
		id="getSyncopeRoles"
		parameterType="String"
		flushCache="true"
		statementType="PREPARED"
		resultType="String">
			select
			  name 
			from syncoperole 
			where syncoperole.id in (
			  select syncoperole_id 
			  from membership 
			  where 
			    syncopeuser_id in (
			      SELECT 
			        syncopeuser.id
			      FROM syncopeuser
			      WHERE syncopeuser.username = #{username}
			    )
			)
	</select>
</mapper>